{"version":3,"sources":["serviceWorker.js","components/Header.js","components/SearchBar.js","components/ImageCard.js","components/ImageList.js","apis/unsplash.js","components/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Header","props","className","title","subtitle","defaultProps","SearchBar","onInputChange","e","term","target","value","setState","onFormSubmit","preventDefault","onSubmit","inputRef","React","createRef","this","current","focus","ref","type","placeholder","onChange","Component","ImageCard","setSpans","height","imageRef","clientHeight","spans","Math","ceil","addEventListener","image","alt_description","urls","style","gridRowEnd","alt","src","regular","ImageList","images","map","key","id","axios","create","baseURL","headers","Authorization","process","REACT_APP_UNSPLASH_CLIENT_ID","App","onSearchSubmit","a","unsplash","get","params","query","response","data","results","ReactDOM","render","document","querySelector","URL","href","origin","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a3ca1a63.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nimport './Header.css';\n\nconst Header = (props) => (\n  <div className=\"header\">\n    <div className=\"content-container\">\n      <h1 className=\"header__title\">{props.title}</h1>\n      {props.subtitle && <h2 className=\"header__subtitle\">{props.subtitle}</h2>}\n    </div>\n  </div>\n);\n\nHeader.defaultProps = {\n  title: 'Visual Collage',\n  subtitle: 'Photos for Everyone',\n};\n\nexport default Header;\n","import React from 'react';\n\nimport './SearchBar.css';\n\nexport default class SearchBar extends React.Component {\n  constructor() {\n    super();\n    this.state = { term: '' };\n    this.inputRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.inputRef.current.focus();\n  }\n\n  onInputChange = (e) => {\n    const term = e.target.value;\n    this.setState(() => ({ term }));\n  };\n\n  onFormSubmit = (e) => {\n    e.preventDefault();\n    this.props.onSubmit(this.state.term);\n    this.setState(() => ({ term: '' }));\n  };\n\n  render() {\n    return (\n      <div className=\"search-bar\">\n        <form onSubmit={this.onFormSubmit}>\n          <input\n            ref={this.inputRef}\n            type=\"text\"\n            value={this.state.term}\n            placeholder=\"Search Unsplash...\"\n            onChange={this.onInputChange}\n          />\n        </form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nexport default class ImageCard extends React.Component {\n  constructor() {\n    super();\n    this.state = { spans: 0 };\n    this.imageRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.imageRef.current.addEventListener('load', this.setSpans);\n  }\n\n  setSpans = () => {\n    const height = this.imageRef.current.clientHeight;\n    const spans = Math.ceil(height / 10);\n\n    this.setState(() => ({ spans }));\n  };\n\n  render() {\n    const { alt_description, urls } = this.props.image;\n    return (\n      <div style={{ gridRowEnd: `span ${this.state.spans}` }}>\n        <img ref={this.imageRef} alt={alt_description} src={urls.regular} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ImageCard from './ImageCard';\n\nimport './ImageList.css';\n\nconst ImageList = (props) => {\n  const images = props.images.map((image) => (\n    <ImageCard key={image.id} image={image} />\n  ));\n\n  return <div className=\"image-list\">{images}</div>;\n};\n\nexport default ImageList;\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://api.unsplash.com',\n  headers: {\n    Authorization: `Client-ID ${process.env.REACT_APP_UNSPLASH_CLIENT_ID}`,\n  },\n});\n","import React from 'react';\nimport Header from './Header';\nimport SearchBar from './SearchBar';\nimport ImageList from './ImageList';\nimport unsplash from '../apis/unsplash';\n\nexport default class App extends React.Component {\n  state = { images: [] };\n\n  onSearchSubmit = async (term) => {\n    const response = await unsplash.get('/search/photos', {\n      params: { query: term },\n    });\n\n    this.setState(() => ({ images: response.data.results }));\n  };\n\n  render() {\n    return (\n      <>\n        <Header />\n        <SearchBar onSubmit={this.onSearchSubmit} />\n        <ImageList images={this.state.images} />\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}